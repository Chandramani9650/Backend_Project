

Q - 1: Write Mongo query to retrieve documents from the orders in ascending order by total.
Ans: db.orders.find().sort({ total: 1 });

Q -2 : Write Mongo query to retrieve the oldest paymentMethod from the payments collection as "_id".
Ans: db.payments.find().sort({ payment_date: 1 }).limit(1).project({ paymentMethod: 1 });


Q - 3: Write Mongo query to retrieve 2nd and 3rd buyers from the buyers collection.
Ans: db.buyers.find().skip(1).limit(2);


Q -4 : Write Mongo query to retrieve the most Expensive product from order_details.
Ans: db.order_details.find().sort({ price: -1 }).limit(1);


Q -5 : Write Mongo query to retrieve the first order from the orders as per the order_date.
Ans: db.orders.find().sort({ order_date: 1 }).limit(1);


Q -6 : Write Mongo query to retrieve the last 3 orders from the orders collection who have less total amount.
Ans: db.orders.find().sort({ total: 1 }).limit(3);


Q -7 : Write Mongo query to retrieve the most recent shipped order from the orders collection.
Ans: db.orders.find({ status: "shipped" }).sort({ ship_date: -1 }).limit(1);


Q -8 : Write Mongo query to get the total revenue from all orders
Ans: db.orders.aggregate([
  { $group: { _id: null, totalRevenue: { $sum: "$total" } } }
]);


Q -9 : Write Mongo query to retrieve all the orders that shipped before 2022-05-26
Ans: db.orders.find({ ship_date: { $lt: ISODate("2022-05-26") } });


Q -10 : Write Mongo query to find the maximum price as maxPrice of products and their names as name for each category.
Ans: db.products.aggregate([
  { $sort: { category_id: 1, price: -1 } },
  { $group: { _id: "$category_id", maxPrice: { $first: "$price" }, name: { $first: "$name" } } }
]);



Q -11 : Write Mongo query to find Most used payment Method as paymentMethod and the number of time it is used as count.
Ans: db.payments.aggregate([
  { $group: { _id: "$paymentMethod", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 1 }
]);


Q -12 : Write Mongo query to find the total count of orders by status.
Ans: db.orders.aggregate([
  { $group: { _id: "$status", count: { $sum: 1 } } }
]);


Q -13 : Write Mongo query to retrieve the orders grouped by customer_id with the max total
Ans: db.orders.aggregate([
  { $group: { _id: "$customer_id", maxTotal: { $max: "$total" } } }
]);
